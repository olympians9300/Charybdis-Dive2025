// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command.InterruptionBehavior;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj2.command.RunCommand;
import edu.wpi.first.wpilibj.GenericHID;
//import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj2.command.button.CommandXboxController;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import edu.wpi.first.wpilibj2.command.button.Trigger;
import frc.robot.subsystems.*;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 * This class is where the bulk of the robot should be declared.  Since Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in the {@link Robot}
 * periodic methods (other than the scheduler calls).  Instead, the structure of the robot
 * (including subsystems, commands, and button mappings) should be declared here.
 */
public class RobotContainer {

  
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
// The robot's subsystems
    private final DriveTrain m_driveTrain;
    //private final RobotContainer m_robotContainer;
// Joysticks
  private final CommandXboxController operatorController = new CommandXboxController(1); //consider changing to CommandXboxController for Trigger events
  private final CommandXboxController driverController = new CommandXboxController(0);
  
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  
  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
  * The container for the robot.  Contains subsystems, OI devices, and commands.
  */
  public RobotContainer() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems

    m_driveTrain = new DriveTrain();
    // SmartDashboard Buttons
    SmartDashboard.putData("Autonomous Command", new AutonomousCommand( m_driveTrain ));
   // SmartDashboard.putData("MoveElevatorUp", new MoveElevatorUp( m_elevator ));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
  
    configureButtonBindings();
    // Configure default commands
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    m_chooser.setDefaultOption("Autonomous Command", new AutonomousCommand( m_driveTrain ));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  /*
  public static RobotContainer getInstance() {
    return m_driveTrain;
  }
  */
  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
        m_driveTrain.setDefaultCommand(
            new RunCommand(
              () ->
                m_driveTrain.tankDrive(
                  -driverController.getLeftY(),-driverController.getRightY()),
                   m_driveTrain)); 
//m_robotDrive.arcadeDrive(-m_controller.getLeftY(), -m_controller.getRightX());
//Create some buttons
/*final JoystickButton ytoElevatorUp = new JoystickButton(operatorController, XboxController.Button.kY.value);        
ytoElevatorUp.onTrue(new MoveElevatorUp( m_elevator ).withInterruptBehavior(InterruptionBehavior.kCancelSelf));
*/

//This was an attempt to get the drive base to drive a bit with a button press, it never worked:

driverController.x().onTrue(new DriveABit(m_driveTrain).withInterruptBehavior(InterruptionBehavior.kCancelSelf));

//Commands needed: Shoot Coral, Move Elevator
Trigger R2Button = operatorController.rightTrigger();
Trigger yButton = operatorController.y();

R2Button
  .onTrue(new R2toShootCoral())
  .onFalse(R2toShootCoral.end());


//CoralShooter runs when pressed, roll CoralShooter wheel

    }

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public CommandXboxController getDriverController() {
      return driverController;
    }

public CommandXboxController getOperatorController() {
      return operatorController;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
  */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }
}

